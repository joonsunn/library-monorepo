name: CI on PR

on:
  pull_request:
    branches:
      - main
      - develop
      - 'release/**'
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    paths-ignore:
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.png'
      - '**/*.gif'
      - '**/*.bmp'
      - '**/*.svg'
      - '**/*.webp'
      - '**/*.mp4'
      - '**/*.mov'
      - '**/*.avi'
      - '**/*.mp3'
      - '**/*.wav'
      - '**/*.md'
      - '**/*.pdf'
      - '**/*.docx'

jobs:
  determine_build_relevance:
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.filter.outputs.frontend == 'true' }}
      backend_changed: ${{ steps.filter.outputs.backend == 'true' }}
      packages_changed: ${{ steps.filter.outputs.packages == 'true' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
            backend:
              - 'apps/backend/**'      
            packages:
              - 'packages/**'

  install_dependencies:
    runs-on: ubuntu-latest
    needs: determine_build_relevance
    if: |
      needs.determine_build_relevance.outputs.frontend_changed == 'true' ||
      needs.determine_build_relevance.outputs.backend_changed == 'true' ||
      needs.determine_build_relevance.outputs.packages_changed == 'true'
    outputs:
      frontend_changed: ${{ needs.determine_build_relevance.outputs.frontend_changed }}
      backend_changed: ${{ needs.determine_build_relevance.outputs.backend_changed }}
      packages_changed: ${{ needs.determine_build_relevance.outputs.packages_changed }}
      node_version: ${{ matrix.node-version }}
    strategy:
      matrix:
        node-version: [22]
    steps:
      - uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install monorepo dependencies
        run: pnpm install --frozen-lockfile

  check_frontend_build:
    runs-on: ubuntu-latest
    needs: [determine_build_relevance, install_dependencies]
    if: |
      (needs.install_dependencies.outputs.frontend_changed == 'true' || 
       needs.install_dependencies.outputs.packages_changed == 'true')
    strategy:
      matrix:
        node-version: ['${{ needs.install_dependencies.outputs.node_version }}']
    steps:
      - uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Build frontend
        working-directory: apps/frontend
        run: pnpm build

  check_backend_build:
    runs-on: ubuntu-latest
    needs: [determine_build_relevance, install_dependencies]
    if: |
      (needs.install_dependencies.outputs.backend_changed == 'true' || 
       needs.install_dependencies.outputs.packages_changed == 'true')
    strategy:
      matrix:
        node-version: ['${{ needs.install_dependencies.outputs.node_version }}']
    steps:
      - uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Build backend
        working-directory: apps/backend
        run: pnpm build
