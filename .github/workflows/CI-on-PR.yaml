name: CI on PR

on:
  pull_request:
    branches:
      - main
      - develop
      - 'release/**'
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
env:
  NODE_VERSION_TO_USE: 22
jobs:
  determine_build_relevance:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      frontend_changed: ${{ steps.filter.outputs.frontend == 'true' }}
      backend_changed: ${{ steps.filter.outputs.backend == 'true' }}
      packages_changed: ${{ steps.filter.outputs.packages == 'true' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
            backend:
              - 'apps/backend/**'      
            packages:
              - 'packages/**'

  check_frontend_build:
    runs-on: ubuntu-latest
    needs: [determine_build_relevance]
    if: |
      github.event.pull_request.draft == false && (
        needs.determine_build_relevance.outputs.frontend_changed == 'true' || 
        needs.determine_build_relevance.outputs.packages_changed == 'true'
      )
    steps:
      - uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_TO_USE }}
          cache: 'pnpm'

      - name: Install dependencies
        working-directory: apps/frontend
        run: pnpm install

      - name: Build frontend
        working-directory: apps/frontend
        run: pnpm build

  check_backend_build:
    runs-on: ubuntu-latest
    needs: [determine_build_relevance]
    if: |
      github.event.pull_request.draft == false && (
        needs.determine_build_relevance.outputs.backend_changed == 'true' || 
        needs.determine_build_relevance.outputs.packages_changed == 'true'
      )
    steps:
      - uses: actions/checkout@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION_TO_USE }}
          cache: 'pnpm'

      - name: Install dependencies
        working-directory: apps/backend
        run: pnpm install

      - name: Generate @prisma
        working-directory: apps/backend
        run: pnpm prisma:generate

      - name: Build backend
        working-directory: apps/backend
        run: pnpm build

  overall_ci_status:
    runs-on: ubuntu-latest
    needs:
      [determine_build_relevance, check_frontend_build, check_backend_build]
    if: always()
    steps:
      - name: Determine Overall Status
        run: |
          FRONTEND_CHANGED="${{ needs.determine_build_relevance.outputs.frontend_changed }}"
          BACKEND_CHANGED="${{ needs.determine_build_relevance.outputs.backend_changed }}"
          PACKAGES_CHANGED="${{ needs.determine_build_relevance.outputs.packages_changed }}"

          FRONTEND_STATUS="${{ needs.check_frontend_build.result }}"
          BACKEND_STATUS="${{ needs.check_backend_build.result }}"

          PR_DRAFT="${{ github.event.pull_request.draft }}"

          echo "PR is Draft: $PR_DRAFT"
          echo "Frontend changed: $FRONTEND_CHANGED"
          echo "Backend changed: $BACKEND_CHANGED"
          echo "Packages changed: $PACKAGES_CHANGED"

          if [ "$PR_DRAFT" == "true" ]; then
            echo "PR is in draft mode. All checks skipped, and CI sta successful."
            exit 0
          fi          

          OVERALL_STATUS="success"

          # If frontend or packages changed, check frontend build status
          if [ "$FRONTEND_CHANGED" == "true" ] || [ "$PACKAGES_CHANGED" == "true" ]; then
            if [ "$FRONTEND_STATUS" != "success" ]; then
              echo "Frontend build was required and did not pass."
              OVERALL_STATUS="failure"
            fi
          else
            echo "Frontend build was not required, status: $FRONTEND_STATUS"
          fi

          # If backend or packages changed, check backend build status
          if [ "$BACKEND_CHANGED" == "true" ] || [ "$PACKAGES_CHANGED" == "true" ]; then
            if [ "$BACKEND_STATUS" != "success" ]; then
              echo "Backend build was required and did not pass."
              OVERALL_STATUS="failure"
            fi
          else
            echo "Backend build was not required, status: $BACKEND_STATUS"
          fi

          if [ "$OVERALL_STATUS" == "failure" ]; then
            echo "Overall CI status is FAILURE."
            exit 1
          else
            echo "Overall CI status is SUCCESS."
          fi
